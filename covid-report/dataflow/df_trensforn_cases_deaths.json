{
	"name": "df_trensforn_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_raw_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "casesAndSeathsSource"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "FilterEuropeOnly"
				},
				{
					"name": "selectedOnlyRequiredfields",
					"description": "continent, population, indicator, daily_count, date, rate_14_day, source'"
				},
				{
					"name": "ivotCounts"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> casesAndSeathsSource",
				"casesAndSeathsSource filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterEuropeOnly",
				"FilterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name == 'date'),",
				"               'reported_'+ 'date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectedOnlyRequiredfields",
				"selectedOnlyRequiredfields pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> ivotCounts"
			]
		}
	}
}